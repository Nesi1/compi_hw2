%{
    #include "output.hpp"
    #include<iostream>
    using namespace std;
    extern char* yytext;
    extern int yylineno;
    int yylex();
    void yyerror(char const*);
%}


%token VOID
%token INT
%token BYTE
%token B
%token BOOL
%token AUTO
%token TRUE
%token FALSE
%token RETURN
%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token ID
%token NUM
%token STRING

%token RBRACE //assoc?
%token LBRACE //assoc?
%token LPAREN //assoc?
%token RPAREN //assoc?

%right ASSIGN
%left OR
%left AND
%left RELOP_EQ /*new*/
%left RELOP_SIZE /*new*/
/* %left BINOP */
%left BINOP_PLUSMINUS /*new*/
%left BINOP_MULDIV /*new*/
%nonassoc CAST_PREC
%right NOT
/* %precedence BINOP_PREC */

%right IF
%right ELSE /*if(x) if(y) x=3; else x=4; else x=6;*/



%%

Program :
        Funcs                                  {output::printProductionRule(1);}
;

Funcs :
        /*epsilon*/                            {output::printProductionRule(2);}
    |   FuncDecl Funcs                         {output::printProductionRule(3);}
; 

FuncDecl :
        RetType ID LPAREN Formals
        RPAREN LBRACE Statements RBRACE        {output::printProductionRule(4);}
;

RetType :
        Type                                   {output::printProductionRule(5);}
    |   VOID                                   {output::printProductionRule(6);}
;

Formals :
        /*epsilon*/                             {output::printProductionRule(7);}
    |   FormalsList                            {output::printProductionRule(8);}
;

FormalsList :
        FormalDecl                             {output::printProductionRule(9);}
    |   FormalDecl COMMA FormalsList           {output::printProductionRule(10);}
;

FormalDecl :
        Type ID                                {output::printProductionRule(11);}
;

Statements :
        Statement                              {output::printProductionRule(12);}
    |   Statements Statement                   {output::printProductionRule(13);}
;

Statement :
        LBRACE Statements RBRACE               {output::printProductionRule(14);}
    |   Type ID SC                             {output::printProductionRule(15);}
    |   Type ID ASSIGN Exp SC                  {output::printProductionRule(16);}
    |   AUTO ID ASSIGN Exp SC                  {output::printProductionRule(17);}
    |   ID ASSIGN Exp SC                       {output::printProductionRule(18);}
    |   Call SC                                {output::printProductionRule(19);}
    |   RETURN SC                              {output::printProductionRule(20);}
    |   RETURN Exp SC                          {output::printProductionRule(21);}
    |   IF LPAREN Exp RPAREN Statement %prec IF{output::printProductionRule(22);}
    |   IF LPAREN Exp RPAREN 
                Statement ELSE Statement       {output::printProductionRule(23);}
    |   WHILE LPAREN Exp RPAREN Statement      {output::printProductionRule(24);}
    |   BREAK SC                               {output::printProductionRule(25);}
    |   CONTINUE SC                            {output::printProductionRule(26);}
;

Call :
        ID LPAREN ExpList RPAREN               {output::printProductionRule(27);}
    |   ID LPAREN RPAREN                       {output::printProductionRule(28);}
;

ExpList :
        Exp                                    {output::printProductionRule(29);}
    |   Exp COMMA ExpList                      {output::printProductionRule(30);}
;

Type :
        INT                                    {output::printProductionRule(31);}
    |   BYTE                                   {output::printProductionRule(32);}
    |   BOOL                                   {output::printProductionRule(33);}
;

Exp :
        LPAREN Exp RPAREN                      {output::printProductionRule(34);}
    /* |   Exp BINOP Exp                       {output::printProductionRule(35);} */
    |   Exp BINOP_MULDIV Exp                   {output::printProductionRule(35);}
    |   Exp BINOP_PLUSMINUS Exp                {output::printProductionRule(35);}
    |   ID                                     {output::printProductionRule(36);}
    |   Call                                   {output::printProductionRule(37);}
    |   NUM                                    {output::printProductionRule(38);}
    |   NUM B                                  {output::printProductionRule(39);}
    |   STRING                                 {output::printProductionRule(40);}
    |   TRUE                                   {output::printProductionRule(41);}
    |   FALSE                                  {output::printProductionRule(42);}
    |   NOT Exp                                {output::printProductionRule(43);}
    |   Exp AND Exp                            {output::printProductionRule(44);}
    |   Exp OR Exp                             {output::printProductionRule(45);}
    /* |   Exp RELOP Exp                       {output::printProductionRule(46);} */
    |   Exp RELOP_EQ Exp                       {output::printProductionRule(46);}
    |   Exp RELOP_SIZE Exp                     {output::printProductionRule(46);}
    |   LPAREN Type RPAREN Exp %prec CAST_PREC {output::printProductionRule(47);}
;

%%

int main()
{
    return yyparse();
}

void yyerror(char const* s){
    if (yychar == YYUNDEF){
        output::errorLex(yylineno);
    }
    else{
        output::errorSyn(yylineno);
    }
}
